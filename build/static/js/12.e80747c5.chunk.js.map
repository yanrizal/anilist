{"version":3,"sources":["components/Shared/PageBreadcrumb.js","pages/Pages/index.js","stores/anime.js","graphql/apollo.js","constants/GraphQl.js"],"names":["PageBreadcrumb","length","this","props","pathItems","Fragment","className","Container","Row","Col","lg","title","children","Breadcrumb","listClassName","map","item","key","id","BreadcrumbItem","to","link","name","active","Component","Topbar","React","lazy","Footer","Home","animeStore","useAnime","useState","displayCategory","setDisplayCategory","loading","setLoading","loadingPage","setLoadingPage","setCategory","category","useEffect","window","addEventListener","scrollNavigation","removeEventListener","loadData","a","getAnimeList","handlePageClick","event","selected","doc","document","documentElement","top","pageYOffset","scrollTop","clientTop","topnav","getElementById","classList","add","remove","viewBox","fill","xmlns","d","onClick","Spinner","color","type","anime","md","sm","xs","Card","CardBody","height","once","src","image","alt","pageClassName","pageLinkClassName","previousClassName","previousLinkClassName","nextLinkClassName","nextClassName","activeClassName","breakLabel","nextLabel","onPageChange","pageRangeDisplayed","pageCount","lastPage","previousLabel","renderOnZeroPageCount","_animeStore","makeApolloClient","token","HttpLink","uri","process","cache","InMemoryCache","ApolloClient","GET_ANIME_LIST","gql","GET_ANIME_DETAIL","AnimeModel","types","model","maybeNull","number","string","CharacterModel","gender","age","dateOfBirth","AnimeDetailModel","bannerImage","coverImage","format","episodes","duration","status","popularity","favourites","description","relations","optional","array","characters","AnimeStore","animeDetail","perPage","currentPage","state","views","self","getQlClient","actions","flow","page","genre","console","log","variables","query","response","data","Page","pageInfo","media","english","native","large","getAnimeDetail","resp","Media","nodes","full","day","month","year","create","story"],"mappings":"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","file":"static/js/12.e80747c5.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Container, Row, Col, Breadcrumb, BreadcrumbItem } from \"reactstrap\";\r\n\r\nclass PageBreadcrumb extends Component {\r\n  render() {\r\n    const length = this.props.pathItems.length;\r\n    return (\r\n      <React.Fragment>\r\n        <section className=\"bg-half bg-light d-table w-100\">\r\n          <Container>\r\n            <Row className=\"justify-content-center\">\r\n              <Col lg=\"12\" className=\"text-center\">\r\n                <div className=\"page-next-level\">\r\n                  {this.props.title ? (\r\n                    <h4 className=\"title\"> {this.props.title}</h4>\r\n                  ) : null}\r\n                  {this.props.children ? this.props.children : null}\r\n                  <div className=\"page-next\">\r\n                    <nav className=\"d-inline-block\">\r\n                      <Breadcrumb\r\n                        aria-label=\"breadcrumb\"\r\n                        listClassName=\"bg-white rounded shadow mb-0\"\r\n                      >\r\n                        {this.props.pathItems.map((item, key) =>\r\n                          item.id !== length ? (\r\n                            <BreadcrumbItem key={key}>\r\n                              <Link\r\n                                to={item.link}\r\n                                className=\"text-uppercase fw-bold text-dark me-1\"\r\n                              >\r\n                                {item.name}\r\n                              </Link>\r\n                            </BreadcrumbItem>\r\n                          ) : (\r\n                            <BreadcrumbItem\r\n                              key={key}\r\n                              active\r\n                              aria-current=\"page\"\r\n                            >\r\n                              {item.name}\r\n                            </BreadcrumbItem>\r\n                          )\r\n                        )}\r\n                      </Breadcrumb>\r\n                    </nav>\r\n                  </div>\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </section>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PageBreadcrumb;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Container, Row, Col, Card, CardBody, Spinner } from 'reactstrap';\r\nimport { Link } from \"react-router-dom\";\r\nimport { useAnime } from \"../../stores/anime\";\r\nimport ReactPaginate from 'react-paginate';\r\nimport LazyLoad from \"react-lazyload\";\r\n\r\n\r\n//Import components\r\nimport PageBreadcrumb from \"../../components/Shared/PageBreadcrumb\";\r\n\r\nconst Topbar = React.lazy(() => import('../Home/Topbar'));\r\nconst Footer = React.lazy(() => import('../Home/Footer'));\r\n\r\n\r\nconst Home = () => {\r\n    const animeStore = useAnime();\r\n    const pathItems = [\r\n        //id must required\r\n        { id : 1, name : \"Anime\", link : \"/\" },\r\n        { id : 2, name : \"List\", link : \"#\" },\r\n    ]\r\n    const [displayCategory, setDisplayCategory] = useState(null)\r\n    const [isOpen, setIsOpen] = useState(false)\r\n    const [loading, setLoading] = useState(true)\r\n    const [loadingPage, setLoadingPage] = useState(true)\r\n\r\n    const setCategory = (category) => {\r\n        setDisplayCategory(category)\r\n    }\r\n    \r\n    useEffect(() => {\r\n        //loadData()\r\n        window.addEventListener(\"scroll\", scrollNavigation, true);\r\n        return () => {\r\n            window.removeEventListener(\"scroll\", scrollNavigation, true);\r\n        }\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        loadData()\r\n    },[displayCategory])\r\n\r\n    const loadData = async () => {\r\n        setLoading(true)\r\n        setLoadingPage(true)\r\n        await animeStore.getAnimeList(1,displayCategory)\r\n        setLoading(false)\r\n        setLoadingPage(false)\r\n    }\r\n\r\n    const handlePageClick = async (event) => {\r\n        setLoading(true)\r\n        await animeStore.getAnimeList(event.selected+1,displayCategory)\r\n        setLoading(false)\r\n    };\r\n\r\n    const scrollNavigation = () => {\r\n        var doc = document.documentElement;\r\n        var top = (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0);\r\n        var topnav = document.getElementById('topnav');\r\n        if (top > 80 && topnav) {\r\n            topnav.classList.add('nav-sticky');\r\n        }\r\n        else if(topnav) {\r\n            topnav.classList.remove('nav-sticky');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Topbar/>\r\n            {/* breadcrumb */}\r\n            <PageBreadcrumb title=\"Welcome To Anilist\" pathItems = {pathItems} />\r\n            <div className=\"position-relative\">\r\n                <div className=\"shape overflow-hidden text-white\">\r\n                    <svg viewBox=\"0 0 2880 48\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                        <path d=\"M0 48H1437.5H2880V0H2160C1442.5 52 720 0 720 0H0V48Z\" fill=\"currentColor\"></path>\r\n                    </svg>\r\n                </div>\r\n            </div>\r\n\r\n    <section className=\"section\">\r\n        <Container>\r\n            <Row className=\"justify-content-center\">\r\n            <div className=\"col-12 filters-group-wrap\">\r\n                <div className=\"filters-group\">\r\n                <ul\r\n                    className=\"container-filter list-inline mb-0 filter-options text-center\"\r\n                    id=\"filter\"\r\n                >\r\n                    <li onClick={() => setCategory(null)}\r\n                        className={\r\n                        displayCategory === null\r\n                            ? \"list-inline-item categories-name border text-dark rounded active\"\r\n                            : \"list-inline-item categories-name border text-dark rounded\"\r\n                        }\r\n                    >\r\n                        All\r\n                \r\n                    </li>{\" \"}\r\n                    <li onClick={() => setCategory(\"Action\")}\r\n                        className={\r\n                        displayCategory === \"Action\"\r\n                            ? \"list-inline-item categories-name border text-dark rounded active\"\r\n                            : \"list-inline-item categories-name border text-dark rounded\"\r\n                        }\r\n                    >\r\n                        Action\r\n                \r\n                    </li>{\" \"}\r\n                    <li onClick={() => setCategory(\"Adventure\")}\r\n                        className={\r\n                        displayCategory === \"Adventure\"\r\n                            ? \"list-inline-item categories-name border text-dark rounded active\"\r\n                            : \"list-inline-item categories-name border text-dark rounded\"\r\n                        }\r\n                    >\r\n                        Adventure\r\n                \r\n                    </li>{\" \"}\r\n                    <li onClick={() =>  setCategory(\"Comedy\")}\r\n                        className={\r\n                        displayCategory === \"Comedy\"\r\n                            ? \"list-inline-item categories-name border text-dark rounded active\"\r\n                            : \"list-inline-item categories-name border text-dark rounded\"\r\n                        }\r\n                    >\r\n                        Comedy\r\n                \r\n                    </li>{\" \"}\r\n                    <li onClick={() => setCategory(\"Drama\")}\r\n                        className={\r\n                        displayCategory === \"Drama\"\r\n                            ? \"list-inline-item categories-name border text-dark rounded active\"\r\n                            : \"list-inline-item categories-name border text-dark rounded\"\r\n                        }\r\n                    >\r\n                        Drama\r\n                    </li>\r\n                </ul>\r\n                </div>\r\n            </div>\r\n            </Row>\r\n            \r\n            {loading &&\r\n                <Row className=\"justify-content-center align-items-center mt-4\">\r\n                    <Spinner\r\n                    className=\"\"\r\n                    color=\"primary\" type=\"grow\"\r\n                    >.</Spinner>\r\n                </Row>\r\n            }\r\n            <Row className=\"projects-wrapper\">\r\n            \r\n            {!loading && animeStore.anime.map((item, key) => (\r\n                <Col key={key} lg={2} md={3} sm={4} xs={12} className=\"mt-4 pt-2 branding\">\r\n                   \r\n                    <Card className=\"border-0 work-container work-grid position-relative d-block overflow-hidden rounded\">\r\n                        <CardBody className=\"p-0 text-center\">\r\n                            <LazyLoad height={261} once>\r\n                                <Link className=\"mfp-image d-inline-block\" to={\"/anime/\"+item.id} title=\"\">\r\n                                    <img src={item.image} className=\"img-fluid\" alt=\"work\"/>\r\n                                </Link>\r\n                            </LazyLoad>\r\n                            <div className=\"content bg-white p-3\">\r\n                                <h5 className=\"mb-0\"><Link to=\"page-work-detail\" className=\"text-dark title\">{item.title}</Link></h5>\r\n                                <h6 className=\"text-muted tag mb-0\"></h6>\r\n                            </div>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Col>\r\n                ))}\r\n           \r\n                <Col xs={12} className=\"mt-4 pt-2\">\r\n                    {!loadingPage &&\r\n                    <ReactPaginate\r\n                        className=\"justify-content-center mb-0 pagination\"\r\n                        pageClassName=\"page-item\"\r\n                        pageLinkClassName=\"page-link\"\r\n                        previousClassName=\"page-item\"\r\n                        previousLinkClassName=\"page-link\"\r\n                        nextLinkClassName=\"page-link\"\r\n                        nextClassName=\"page-item\"\r\n                        activeClassName=\"active\"\r\n                        breakLabel=\"...\"\r\n                        nextLabel=\"next >\"\r\n                        onPageChange={handlePageClick}\r\n                        pageRangeDisplayed={5}\r\n                        pageCount={animeStore.lastPage}\r\n                        previousLabel=\"< previous\"\r\n                        renderOnZeroPageCount={null}\r\n                    />\r\n                    }\r\n                </Col>\r\n\r\n            </Row>\r\n        </Container>\r\n    </section>\r\n    \r\n    <Footer/>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Home;","import { types, flow } from \"mobx-state-tree\";\nimport makeApolloClient from '../graphql/apollo';\nimport { GET_ANIME_LIST, GET_ANIME_DETAIL } from '../constants/GraphQl';\n\nexport const AnimeModel = types.model(\"AnimeModel\", {\n  id: types.maybeNull(types.number),\n  title: types.maybeNull(types.string, \"\"),\n  image: types.maybeNull(types.string, \"\"),\n})\n\nexport const CharacterModel = types.model(\"CharacterModel\", {\n    id: types.maybeNull(types.number),\n    name: types.maybeNull(types.string, \"\"),\n    image: types.maybeNull(types.string, \"\"),\n    gender: types.maybeNull(types.string, \"\"),\n    age: types.maybeNull(types.string, \"\"),\n    dateOfBirth: types.maybeNull(types.string, \"\")\n})\n\nexport const AnimeDetailModel = types.model(\"AnimeDetailModel\", {\n    title: types.maybeNull(types.string, \"\"),\n    type: types.maybeNull(types.string, \"\"),\n    bannerImage: types.maybeNull(types.string, \"\"),\n    coverImage: types.maybeNull(types.string, \"\"),\n    format: types.maybeNull(types.string, \"\"),\n    episodes: types.maybeNull(types.number, \"\"),\n    duration: types.maybeNull(types.number, \"\"),\n    status: types.maybeNull(types.string, \"\"),\n    popularity: types.maybeNull(types.number, \"\"),\n    favourites: types.maybeNull(types.number, \"\"),\n    description: types.maybeNull(types.string, \"\"),\n    relations: types.optional(types.array(AnimeModel), []),\n    characters: types.optional(types.array(CharacterModel), []),\n})\n\nexport const AnimeStore = types.model(\"AnimeStore\", {\n    anime: types.array(AnimeModel),\n    animeDetail: types.optional(AnimeDetailModel, {}),\n    perPage: 24,\n    lastPage: 0,\n    currentPage: 1,\n    state: 'pending'\n  })\n  .views(self => ({\n    get getQlClient() {\n        return makeApolloClient()\n    }\n  }))\n  .actions(self => {\n    const getAnimeList = flow(function* getAnimeList(page,genre) {\n      try {\n        self.state = 'pending'\n        console.log('page',page,genre)\n        const variables = {\n            page: page,\n            perPage: self.perPage,\n            genre: genre\n        }\n        const response = yield self.getQlClient.query({\n            query: GET_ANIME_LIST,\n            variables\n        })\n        console.log('data', response)\n        self.lastPage = response.data.Page.pageInfo.lastPage\n        self.currentPage = response.data.Page.pageInfo.currentPage\n        const data = response.data.Page.media.map((item) => {\n            return {\n                id: item.id,\n                title: item.title.english || item.title.native,\n                image: item.coverImage.large\n            }\n        })\n        console.log('d',data)\n        self.anime = data\n        self.state = 'done'\n        return response.data\n      } catch (error) {\n        console.log('er', error)\n        self.state = 'error'\n      }\n    })\n    const getAnimeDetail = flow(function* getAnimeDetail(id) {\n        try {\n          self.state = 'pending'\n          const variables = {\n              id\n          }\n          const response = yield self.getQlClient.query({\n              query: GET_ANIME_DETAIL,\n              variables\n          })\n          console.log('datadet', response)\n          const resp = response.data.Media;\n          const data = {\n            title: resp.title.english || resp.title.native,\n            type: resp.type,\n            bannerImage: resp.bannerImage,\n            coverImage: resp.coverImage.large,\n            description: resp.description,\n            format: resp.format,\n            episodes: resp.episodes,\n            duration: resp.duration,\n            status: resp.status,\n            popularity: resp.popularity,\n            favourites: resp.favourites,\n            relations: resp.relations.nodes.map((item) => {\n                return {\n                    id: item.id,\n                    title: item.title.english || item.title.native,\n                    image: item.coverImage.large\n                }\n            }),\n            characters: resp.characters.nodes.map((item) => {\n                return {\n                    id: item.id,\n                    name: item.name.full,\n                    image: item.image.large,\n                    gender: item.gender,\n                    age: item.age,\n                    dateOfBirth: `${item.dateOfBirth.day} - ${item.dateOfBirth.month} - ${item.dateOfBirth.year}`\n                }\n            })\n          }\n          console.log('d',data)\n          self.animeDetail = data\n          self.state = 'done'\n          return response.data\n        } catch (error) {\n          console.log('er', error)\n          self.state = 'error'\n        }\n      })\n    return {\n      getAnimeList,\n      getAnimeDetail\n    }\n  });\n\nlet _animeStore\nexport const useAnime = () => {\n  if (!_animeStore) {\n    _animeStore = AnimeStore.create({\n      anime: [],\n      story: {},\n      state: 'pending'\n    })\n  }\n\n  return _animeStore;\n}\n","import { HttpLink } from 'apollo-link-http';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\n\nconst makeApolloClient = (token) => {\n  // create an apollo link instance, a network interface for apollo client\n  const link = new HttpLink({\n    uri: process.env.REACT_APP_PUBLIC_URL,\n  });\n\n  //console.log(GRAPHQL_ENDPOINT, token)\n  // create an inmemory cache instance for caching graphql data\n  const cache = new InMemoryCache()\n  // instantiate apollo client with apollo link instance and cache instance\n  const client = new ApolloClient({\n    link,\n    cache\n  });\n  return client;\n}\n\nexport default makeApolloClient;\n","import gql from 'graphql-tag';\n\nexport const GET_ANIME_LIST = gql`\nquery ($page: Int, $perPage: Int, $genre: String) {\n    Page(page: $page, perPage: $perPage){\n      pageInfo {\n        total\n        perPage\n        currentPage\n        lastPage\n        hasNextPage\n      }\n      media(isAdult:false,genre:$genre) {\n        id,\n        isAdult\n        coverImage {\n          large\n        },\n        title {\n          english\n          native\n        }\n      }\n    }\n  }\n`\n\nexport const GET_ANIME_DETAIL = gql`\nquery ($id: Int) {\n    Media(id: $id){\n        title {\n          romaji\n          english\n          native\n          userPreferred\n        }\n        type\n        bannerImage\n        coverImage {\n          extraLarge\n          large\n        }\n        format\n        episodes\n        duration\n        status\n        popularity\n        favourites\n        relations {\n            nodes {\n              id\n              title {\n                english\n                native\n              }\n              coverImage {\n                large\n              }\n            }\n        }\n        description(asHtml:false)\n        characters {\n          nodes {\n            id\n            gender\n            age\n            dateOfBirth {\n              year\n              month\n              day\n            }\n            name {\n              first\n              middle\n              last\n              full\n              native\n              userPreferred\n            }\n            image {\n              large\n              medium\n            }\n          }\n        } \n      }\n  }\n`"],"sourceRoot":""}